security:
    role_hierarchy:
        ROLE_ADMIN: ROLE_USER

    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
        App\Entity\User:
            algorithm: auto    
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        ## used to reload user from session & other features (e.g. switch_user)
        providers:

            #memory: 
            #        users: 
            #            acseo: {password: '$2y$13$faO/SP5m/1ZKrbLlLvHYMu0IWYFQnvx/JWuZQN.3aIxSqeSx4RJee', roles: ['ROLE_ADMIN']} #acseo

            entity:
                class: App\Entity\User
                property: username
            
        
        users_in_memory :
            memory:
                users: 
                    acseo: {password: '$2y$13$faO/SP5m/1ZKrbLlLvHYMu0IWYFQnvx/JWuZQN.3aIxSqeSx4RJee', roles: ['ROLE_ADMIN']} #acseo
        app_user_provider:
                entity:
                    class: App\Entity\User
                    property: username            
        # used to reload user from session & other features (e.g. switch_user)
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: app_user_provider

            # http_basic:
            #    realm: Secured Area
            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true
            form_login:
                login_path: app_login
                check_path: app_login
            #    failure_path: app_login
                enable_csrf: true
                csrf_parameter: _csrf_token
            
            logout:
                path: app_logout

        login:
            pattern: ^/login
            stateless: true
    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        #
         - { path: ^/admin, roles: IS_AUTHENTICATED_FULLY }
         - { path: ^/login, roles: PUBLIC_ACCESS }
         - { path: ^/contact, roles: PUBLIC_ACCESS }
         - { path: ^/send, roles: PUBLIC_ACCESS }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
